console.log('TS –º–∏–Ω–∏‚Äë–ø–µ—Å–æ—á–Ω–∏—Ü–∞ üöÄ');

// –ü—Ä–∏–º–∏—Ç–∏–≤ + –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
let age: number = 18;
// age = "18"; // ‚ùå TypeScript –Ω–µ –¥–∞—Å—Ç —Ç–∞–∫ —Å–¥–µ–ª–∞—Ç—å

// 1. –°–æ–∑–¥–∞–π –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ age1/title1/isReady1 —Å —Ç–∏–ø–∞–º–∏ number/string/boolean
let age1: number = 18;
let title1: string = 'About us';
let isReady1: boolean = false;

// 2. –û–ø–∏—à–∏ –ª–∏—Ç–µ—Ä–∞–ª—å–Ω—ã–π —Ç–∏–ø Mode, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è "light –∏–ª–∏ "dark"
// –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é currentMode —ç—Ç–æ–≥–æ —Ç–∏–ø–∞
type Mode = 'light' | 'dark';
let currentMode: Mode = 'light';

// 3. –°–æ–∑–¥–∞–π —Ç–∏–ø ID –∫–∞–∫ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ number | string –∏ –¥–≤–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å —Ä–∞–∑–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
type ID = number | string;
const id1: ID = 15;
const id2: ID = '5';

// 4. –°–æ–∑–¥–∞–π –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ nums (–º–∞—Å—Å–∏–≤ —á–∏—Å–µ–ª) –∏ names (–º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫). –Ø–≤–Ω–æ –∏—Ö —Ç–∏–ø–∏–∑–∏—Ä—É–π
let nums: number[] = [1, 2, 3]; //let nums:Array<number>
let names: string[] = ['a', 'b', 'c']; //let names:Array<string>

// 5. –°–æ–∑–¥–∞–π –æ–±—ä–µ–∫—Ç product –∏ –∑–∞–¥–∞–π —Ç–∏–ø ¬´–Ω–∞ –º–µ—Å—Ç–µ¬ª: product –∏–º–µ–µ—Ç id (—á–∏—Å–ª–æ), name (—Å—Ç—Ä–æ–∫–∞), price (—á–∏—Å–ª–æ)
let product: { id: number; name: string; price: number } = {
  id: 2,
  name: 'lock',
  price: 15,
};

// 6. –î–∞–π –∏–º—è —Ç–∏–ø—É Person, —É –∫–æ—Ç–æ—Ä–æ–≥–æ id —á–∏—Å–ª–æ, name —Å—Ç—Ä–æ–∫–∞ –∏ —Å–æ–∑–¥–∞–π –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é p —ç—Ç–æ–≥–æ —Ç–∏–ø–∞
type Person = { id: number; name: string };
const p: Person = { id: 0, name: 'Vova' };

// 7. –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é sizeOf: –ø—Ä–∏–Ω–∏–º–∞–µ—Ç string | number ‚Üí –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç number (–¥–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ —Å–∞–º–æ —á–∏—Å–ª–æ)
function sizeOf(size: string | number): number {
  if (typeof size === 'string') {
    return size.length;
  }
  return size;
}

// 8. –û–ø–∏—à–∏ —Ç–∏–ø User: id ‚Äî number, name ‚Äî string, nickname ‚Äî –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ (string)
type User = { id: number; name: string; nickname?: string };

// 9. –§—É–Ω–∫—Ü–∏—è hello: –ø—Ä–∏–Ω–∏–º–∞–µ—Ç User ‚Üí –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç "Hi, Ann (@ann)" –∏–ª–∏ "Hi, Ann" (–µ—Å–ª–∏ –Ω–µ—Ç nickname). –†–µ–∞–ª–∏–∑—É–π –µ–µ
function hello(user: User): string {
  if (user.nickname) {
    return 'Hi, Ann (@ann)';
  }
  return 'Hi, Ann';
}

// 10. –¢–∏–ø–∏–∑–∏—Ä—É–π —Å—Ç—Ä–µ–ª–æ—á–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é lower: –ø—Ä–∏–Ω–∏–º–∞–µ—Ç string ‚Üí –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç string
const lower = (text: string): string => text.toLocaleLowerCase();

// 11. –û–ø–∏—à–∏ —Ç–∏–ø —Ñ—É–Ω–∫—Ü–∏–∏ Calc: –ø—Ä–∏–Ω–∏–º–∞–µ—Ç 2 –∞—Ä–≥—É–º–µ–Ω—Ç–∞ number (a, b), –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç number
type Calc = (a: number, b: number) => number;

// 12. –†–µ–∞–ª–∏–∑—É–π 2 —Ñ—É–Ω–∫—Ü–∏–∏: add (—Å–∫–ª–∞–¥—ã–≤–∞–µ—Ç 2 —á–∏—Å–ª–∞) –∏ mul (–ø–µ—Ä–µ–º–Ω–æ–∂–∞–µ—Ç) —Å —Ç–∏–ø–æ–º Calc
const add: Calc = (a, b) => a + b;
const mul: Calc = (a, b) => a * b;

// 13. –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é log: –ø—Ä–∏–Ω–∏–º–∞–µ—Ç message (—Å—Ç—Ä–æ–∫–∞), –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (void). –ü—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ—Ç message –≤ –∫–æ–Ω—Å–æ–ª—å
function log(message: string): void {
  console.log(message);
}

// 14. –ù–∞–ø–∏—à–∏ –∏ —Ç–∏–ø–∏–∑–∏—Ä—É–π —Ñ—É–Ω–∫—Ü–∏—é firstEven: –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –º–∞—Å—Å–∏–≤ —á–∏—Å–µ–ª
// –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤–æ–µ —á–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ undefined (–µ—Å–ª–∏ –≤ –º–∞—Å—Å–∏–≤–µ –Ω–µ—Ç —á–µ—Ç–Ω—ã—Ö)
function firstEven(array: number[]): number | undefined {
  return array.find((i) => i % 2 === 0);
}

// 15. –û–ø–∏—à–∏ —Ç–∏–ø Profile2 (id —á–∏—Å–ª–æ, name: —Å—Ç—Ä–æ–∫–∞, age –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ —á–∏—Å–ª–æ);
// –Ω–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é ageLabel(p:Profile2):string (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π undefined)
type Profile = { id: number; name: string; age?: number };
function ageLabel(p: Profile): string {
  if (age === undefined) {
    return `Id: ${p.id}, name: ${p.name}`;
  }
  return `Id: ${p.id}, name: ${p.name}, age: ${p.age}`;
}

// 16. –ù–∞–ø–∏—à–∏ –∏ —Ç–∏–ø–∏–∑–∏—Ä—É–π —Ñ—É–Ω–∫—Ü–∏—é createPagination. –ü—Ä–∏–Ω–∏–º–∞–µ—Ç 3 –∞—Ä–≥—É–º–µ–Ω—Ç–∞ page —á–∏—Å–ª–æ, pageSize —á–∏—Å–ª–æ
// sortBy —Å—Ç—Ä–æ–∫–∞ —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'createdAt'.
// –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç
// { page: number;
//   pageSize: number,
//   sortBy: string }
function createPagination(
  page: number,
  pageSize: number,
  sortBy: string = 'createdAt'
): { page: number; pageSize: number; sortBy: string } {
  return {
    page,
    pageSize,
    sortBy,
  };
}

// 17. –°–æ–∑–¥–∞–π –ª–∏—Ç–µ—Ä–∞–ª—å–Ω—ã–π —Ç–∏–ø Result –∏ —Ñ—É–Ω–∫—Ü–∏—é isOk –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç Result
// –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç boolean (true –µ—Å–ª–∏ "ok" –∏ false –µ—Å–ª–∏ "fail")
type Result = 'ok' | 'fail';
function isOk(r: Result): boolean {
  if (r === 'ok') return true;
  return false;
}
